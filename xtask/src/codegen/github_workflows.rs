//! Based on
//! https://github.com/rust-lang/rust-gha/blob/auto/src/tools/expand-yaml-anchors/src/main.rs

use crate::{
    codegen::{ensure_codegen_freshness, Mode},
    not_bash::fs2,
    project_root_dir,
};
use anyhow::Result;
use yaml_rust::{Yaml, YamlEmitter, YamlLoader};

/// Name of a special key that will be removed from all the maps in expanded configuration files.
/// This key can then be used to contain shared anchors.
const ANCHORS_DECL_KEY: &str = ".expand-yaml-anchors";
pub(crate) const WORKFLOWS_SRC_DIR: &str = "xtask/src/codegen/github_workflows";
pub(crate) const WORKFLOWS_DEST_DIR: &str = ".github/workflows";

pub fn generate(mode: Mode) -> Result<()> {
    let src_dir = project_root_dir().join(WORKFLOWS_SRC_DIR);
    let dest_dir = project_root_dir().join(WORKFLOWS_DEST_DIR);

    let rust_toolchain = fs2::read_to_string(project_root_dir().join("rust-toolchain"))?;
    let rust_toolchain = rust_toolchain.trim();

    for file in fs2::read_files(&src_dir, &["yml", "yaml"])? {
        let src = file.path();
        let dest = dest_dir.join(&file.file_name());

        let expanded = expand_yaml_anchors(&fs2::read_to_string(&src)?)?;
        let result = expanded.replace("<stable>", &rust_toolchain);

        ensure_codegen_freshness(&result, &dest, mode)?;

        println!("Generated {:?}", file.file_name());
    }
    Ok(())
}

fn expand_yaml_anchors(source: &str) -> Result<String> {
    let mut buf = "# Warning: autogenerated file, see `cargo xtask codegen`\n".to_owned();

    let to_remove = Yaml::String(ANCHORS_DECL_KEY.to_owned());

    for document in YamlLoader::load_from_str(&source)? {
        let mut document = yaml_merge_keys::merge_keys(document)?;
        remove_key_recursively(&mut document, &to_remove);

        YamlEmitter::new(&mut buf).dump(&document)?;
        buf.push('\n');
    }

    Ok(buf)
}

fn remove_key_recursively(document: &mut Yaml, key: &Yaml) {
    match document {
        Yaml::Hash(map) => {
            map.remove(&key);
            map.iter_mut()
                .for_each(|(_, val)| remove_key_recursively(val, key))
        }
        Yaml::Array(vec) => vec
            .iter_mut()
            .for_each(|it| remove_key_recursively(it, key)),
        _ => {}
    }
}
